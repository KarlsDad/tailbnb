// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  stay: (where?: StayWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  stay: (where: StayWhereUniqueInput) => StayNullablePromise;
  stays: (args?: {
    where?: StayWhereInput;
    orderBy?: StayOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Stay>;
  staysConnection: (args?: {
    where?: StayWhereInput;
    orderBy?: StayOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StayConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createStay: (data: StayCreateInput) => StayPromise;
  updateStay: (args: {
    data: StayUpdateInput;
    where: StayWhereUniqueInput;
  }) => StayPromise;
  updateManyStays: (args: {
    data: StayUpdateManyMutationInput;
    where?: StayWhereInput;
  }) => BatchPayloadPromise;
  upsertStay: (args: {
    where: StayWhereUniqueInput;
    create: StayCreateInput;
    update: StayUpdateInput;
  }) => StayPromise;
  deleteStay: (where: StayWhereUniqueInput) => StayPromise;
  deleteManyStays: (where?: StayWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  stay: (
    where?: StaySubscriptionWhereInput
  ) => StaySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StayOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "hostType_ASC"
  | "hostType_DESC"
  | "country_ASC"
  | "country_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type StayWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export interface StayWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  hostType?: Maybe<String>;
  hostType_not?: Maybe<String>;
  hostType_in?: Maybe<String[] | String>;
  hostType_not_in?: Maybe<String[] | String>;
  hostType_lt?: Maybe<String>;
  hostType_lte?: Maybe<String>;
  hostType_gt?: Maybe<String>;
  hostType_gte?: Maybe<String>;
  hostType_contains?: Maybe<String>;
  hostType_not_contains?: Maybe<String>;
  hostType_starts_with?: Maybe<String>;
  hostType_not_starts_with?: Maybe<String>;
  hostType_ends_with?: Maybe<String>;
  hostType_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  AND?: Maybe<StayWhereInput[] | StayWhereInput>;
  OR?: Maybe<StayWhereInput[] | StayWhereInput>;
  NOT?: Maybe<StayWhereInput[] | StayWhereInput>;
}

export interface StayCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  cost: Int;
  hostType?: Maybe<String>;
  country: String;
}

export interface StayUpdateInput {
  title?: Maybe<String>;
  cost?: Maybe<Int>;
  hostType?: Maybe<String>;
  country?: Maybe<String>;
}

export interface StayUpdateManyMutationInput {
  title?: Maybe<String>;
  cost?: Maybe<Int>;
  hostType?: Maybe<String>;
  country?: Maybe<String>;
}

export interface StaySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StayWhereInput>;
  AND?: Maybe<StaySubscriptionWhereInput[] | StaySubscriptionWhereInput>;
  OR?: Maybe<StaySubscriptionWhereInput[] | StaySubscriptionWhereInput>;
  NOT?: Maybe<StaySubscriptionWhereInput[] | StaySubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Stay {
  id: ID_Output;
  title: String;
  cost: Int;
  hostType?: String;
  country: String;
}

export interface StayPromise extends Promise<Stay>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  cost: () => Promise<Int>;
  hostType: () => Promise<String>;
  country: () => Promise<String>;
}

export interface StaySubscription
  extends Promise<AsyncIterator<Stay>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  hostType: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
}

export interface StayNullablePromise
  extends Promise<Stay | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  cost: () => Promise<Int>;
  hostType: () => Promise<String>;
  country: () => Promise<String>;
}

export interface StayConnection {
  pageInfo: PageInfo;
  edges: StayEdge[];
}

export interface StayConnectionPromise
  extends Promise<StayConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StayEdge>>() => T;
  aggregate: <T = AggregateStayPromise>() => T;
}

export interface StayConnectionSubscription
  extends Promise<AsyncIterator<StayConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StayEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStaySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StayEdge {
  node: Stay;
  cursor: String;
}

export interface StayEdgePromise extends Promise<StayEdge>, Fragmentable {
  node: <T = StayPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StayEdgeSubscription
  extends Promise<AsyncIterator<StayEdge>>,
    Fragmentable {
  node: <T = StaySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStay {
  count: Int;
}

export interface AggregateStayPromise
  extends Promise<AggregateStay>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStaySubscription
  extends Promise<AsyncIterator<AggregateStay>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StaySubscriptionPayload {
  mutation: MutationType;
  node: Stay;
  updatedFields: String[];
  previousValues: StayPreviousValues;
}

export interface StaySubscriptionPayloadPromise
  extends Promise<StaySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StayPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StayPreviousValuesPromise>() => T;
}

export interface StaySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StaySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StaySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StayPreviousValuesSubscription>() => T;
}

export interface StayPreviousValues {
  id: ID_Output;
  title: String;
  cost: Int;
  hostType?: String;
  country: String;
}

export interface StayPreviousValuesPromise
  extends Promise<StayPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  cost: () => Promise<Int>;
  hostType: () => Promise<String>;
  country: () => Promise<String>;
}

export interface StayPreviousValuesSubscription
  extends Promise<AsyncIterator<StayPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  hostType: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Stay",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
