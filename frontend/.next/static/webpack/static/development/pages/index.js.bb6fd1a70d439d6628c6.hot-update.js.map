{"version":3,"file":"static/webpack/static/development/pages/index.js.bb6fd1a70d439d6628c6.hot-update.js","sources":["webpack:///./src/components/containers/Today.jsx"],"sourcesContent":["import * as React from 'react';\n// import { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport withSizes from 'react-sizes';\n\n// Components\n// import { LocationExperienceCard } from '../functions/LocationExperienceCard';\nimport { ShowAll } from '../ShowAll';\n\n// Wrapper\nimport { Section } from '../wrapper/Section';\n\nconst GET_LOCATION_EXPERIENCES = gql`\n  query LocationExperiences($available: String, $location: String) {\n    experiences(\n      where: { available: $available, location: $location }\n      first: 6\n    ) {\n      id\n      title\n      cost\n      ratings\n      reviews\n      location\n      img\n      available\n      category\n    }\n  }\n`;\n\nconst mapSizesToProps = ({ width }) => ({\n  isMobile: width < 480,\n  isTablet: width > 480 && width < 1024,\n  isLaptop: width > 1024 && width < 1440,\n  isDesktop: width > 1440\n});\n\n// interface Experience {\n//   id: string;\n//   title: string;\n//   cost: number;\n//   ratings: number;\n//   reviews: number;\n//   category: string;\n//   img: string;\n// }\n\n// interface ExperienceData {\n//   experiences: Experience[];\n// }\n\nconst Today = ({ isMobile }) => {\n  const { loading, error, data } = useQuery(GET_LOCATION_EXPERIENCES, {\n    variables: {\n      available: 'Today',\n      location: 'Vancouver'\n    }\n  });\n\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <Section\n        title='Today in Vancouver'\n        phrase='Book activities led by local hosts on your next trip.'>\n        <div className='flex items-start justify-start flex-wrap w-full'>\n          {loading ? (\n            <div className='flex justify-center items-center w-full py-20'>\n              <PulseLoader size={10} color={'#008489'} />\n            </div>\n          ) : (\n            data && (\n              <>\n                <div>{isMobile ? 'Is Mobile' : 'Is Not Mobile'}</div>\n                <div>{isTablet ? 'Is Tablet' : 'Is not Tablet'}</div>\n                <div>{isLaptop ? 'Is Laptop' : 'Is not Laptop'}</div>\n                <div>{isDesktop ? 'Is Desktop' : 'Is not Desktop'}</div>\n                {/* {data.experiences.map((experience, index) => {\n                  if (index == 4) {\n                  }\n                  return (\n                    <div className='w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 pb-5'>\n                      <LocationExperienceCard\n                        key={index}\n                        id={experience.id}\n                        img={experience.img}\n                        title={experience.title}\n                        cost={experience.cost}\n                        ratings={experience.ratings}\n                        reviews={experience.reviews}\n                        category={experience.category}\n                      />\n                    </div>\n                  );\n                })} */}\n              </>\n            )\n          )}\n        </div>\n        <ShowAll title='Show all experiences' />\n      </Section>\n    </>\n  );\n};\n\nexport default withSizes(mapSizesToProps)(Today);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAFA;AADA;AADA;AAAA;AAAA;AACA;AAOA;AAEA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}