{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Desktop/nextbnb/frontend/src/components/containers/LocationExperiences.jsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport withSizes from 'react-sizes'; // Components\n\nimport { LocationExperienceCard } from '../functions/LocationExperienceCard';\nimport { ShowAll } from '../ShowAll'; // Wrapper\n\nimport { Section } from '../wrapper/Section';\nconst GET_LOCATION_EXPERIENCES = gql`\n  query LocationExperiences($available: String, $location: String) {\n    experiences(\n      where: { available: $available, location: $location }\n      first: 6\n    ) {\n      id\n      title\n      cost\n      ratings\n      reviews\n      location\n      img\n      available\n      category\n    }\n  }\n`;\n\nconst mapSizesToProps = ({\n  width\n}) => ({\n  isMobile: width < 767,\n  isTablet: width > 767 && width < 1023,\n  isLaptop: width > 1023 && width < 1279,\n  isDesktop: width > 1279 && width < 1529,\n  isLargeDesktop: width > 1529\n});\n\nconst renderContent = (data, number) => {\n  var content = [];\n\n  for (let i = 0; i < number; i++) {\n    content.push(__jsx(\"div\", {\n      className: \"pb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, __jsx(LocationExperienceCard, {\n      key: i,\n      id: data === null || data === void 0 ? void 0 : data.experiences[i].id,\n      img: data === null || data === void 0 ? void 0 : data.experiences[i].img,\n      title: data === null || data === void 0 ? void 0 : data.experiences[i].title,\n      cost: data === null || data === void 0 ? void 0 : data.experiences[i].cost,\n      ratings: data === null || data === void 0 ? void 0 : data.experiences[i].ratings,\n      reviews: data === null || data === void 0 ? void 0 : data.experiences[i].reviews,\n      category: data === null || data === void 0 ? void 0 : data.experiences[i].category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })));\n  }\n\n  return content;\n}; // interface Experience {\n//   id: string;\n//   title: string;\n//   cost: number;\n//   ratings: number;\n//   reviews: number;\n//   category: string;\n//   img: string;\n// }\n// interface ExperienceData {\n//   experiences: Experience[];\n// }\n\n\nconst LocationExperiences = ({\n  isMobile,\n  isTablet,\n  isLaptop,\n  isDesktop,\n  isLargeDesktop,\n  location\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOCATION_EXPERIENCES, {\n    variables: {\n      available: 'Today',\n      location: 'Vancouver'\n    }\n  });\n  if (error) return `Error! ${error.message}`;\n  return __jsx(React.Fragment, null, __jsx(Section, {\n    title: `Experiences in ${location}`,\n    phrase: \"Book activities led by local hosts on your next trip.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"grid gap-3 2xl:grid-cols-6 xl:grid-cols-5 lg:grid-cols-4 md:grid-cols-3 grid-cols-2 w-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, loading ? __jsx(\"div\", {\n    className: \"flex justify-center items-center w-full py-20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(PulseLoader, {\n    size: 10,\n    color: '#008489',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })) : data && __jsx(React.Fragment, null, isMobile ? renderContent(data, 4) : null, isTablet ? renderContent(data, 3) : null, isLaptop ? renderContent(data, 4) : null, isDesktop ? renderContent(data, 5) : null, isLargeDesktop ? renderContent(data, 6) : null)), __jsx(ShowAll, {\n    title: \"Show all experiences\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })));\n};\n\nexport default withSizes(mapSizesToProps)(Today);","map":{"version":3,"sources":["/Users/ken/Desktop/nextbnb/frontend/src/components/containers/LocationExperiences.jsx"],"names":["React","useQuery","gql","PulseLoader","withSizes","LocationExperienceCard","ShowAll","Section","GET_LOCATION_EXPERIENCES","mapSizesToProps","width","isMobile","isTablet","isLaptop","isDesktop","isLargeDesktop","renderContent","data","number","content","i","push","experiences","id","img","title","cost","ratings","reviews","category","LocationExperiences","location","loading","error","variables","available","message","Today"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport withSizes from 'react-sizes';\n\n// Components\nimport { LocationExperienceCard } from '../functions/LocationExperienceCard';\nimport { ShowAll } from '../ShowAll';\n\n// Wrapper\nimport { Section } from '../wrapper/Section';\n\nconst GET_LOCATION_EXPERIENCES = gql`\n  query LocationExperiences($available: String, $location: String) {\n    experiences(\n      where: { available: $available, location: $location }\n      first: 6\n    ) {\n      id\n      title\n      cost\n      ratings\n      reviews\n      location\n      img\n      available\n      category\n    }\n  }\n`;\n\nconst mapSizesToProps = ({ width }) => ({\n  isMobile: width < 767,\n  isTablet: width > 767 && width < 1023,\n  isLaptop: width > 1023 && width < 1279,\n  isDesktop: width > 1279 && width < 1529,\n  isLargeDesktop: width > 1529\n});\n\nconst renderContent = (data, number) => {\n  var content = [];\n\n  for (let i = 0; i < number; i++) {\n    content.push(\n      <div className='pb-5'>\n        <LocationExperienceCard\n          key={i}\n          id={data?.experiences[i].id}\n          img={data?.experiences[i].img}\n          title={data?.experiences[i].title}\n          cost={data?.experiences[i].cost}\n          ratings={data?.experiences[i].ratings}\n          reviews={data?.experiences[i].reviews}\n          category={data?.experiences[i].category}\n        />\n      </div>\n    );\n  }\n  return content;\n};\n\n// interface Experience {\n//   id: string;\n//   title: string;\n//   cost: number;\n//   ratings: number;\n//   reviews: number;\n//   category: string;\n//   img: string;\n// }\n\n// interface ExperienceData {\n//   experiences: Experience[];\n// }\n\nconst LocationExperiences = ({\n  isMobile,\n  isTablet,\n  isLaptop,\n  isDesktop,\n  isLargeDesktop,\n  location\n}) => {\n  const { loading, error, data } = useQuery(GET_LOCATION_EXPERIENCES, {\n    variables: {\n      available: 'Today',\n      location: 'Vancouver'\n    }\n  });\n\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <Section\n        title={`Experiences in ${location}`}\n        phrase='Book activities led by local hosts on your next trip.'>\n        <div className='grid gap-3 2xl:grid-cols-6 xl:grid-cols-5 lg:grid-cols-4 md:grid-cols-3 grid-cols-2 w-full'>\n          {loading ? (\n            <div className='flex justify-center items-center w-full py-20'>\n              <PulseLoader size={10} color={'#008489'} />\n            </div>\n          ) : (\n            data && (\n              <>\n                {isMobile ? renderContent(data, 4) : null}\n                {isTablet ? renderContent(data, 3) : null}\n                {isLaptop ? renderContent(data, 4) : null}\n                {isDesktop ? renderContent(data, 5) : null}\n                {isLargeDesktop ? renderContent(data, 6) : null}\n              </>\n            )\n          )}\n        </div>\n        <ShowAll title='Show all experiences' />\n      </Section>\n    </>\n  );\n};\n\nexport default withSizes(mapSizesToProps)(Today);\n"]},"metadata":{},"sourceType":"module"}