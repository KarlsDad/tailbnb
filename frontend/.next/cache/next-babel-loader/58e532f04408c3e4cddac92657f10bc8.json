{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Desktop/nextbnb/frontend/src/components/containers/TopRated.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport Media from 'react-media'; // Components\n\nimport { TopRatedCard } from '../functions/TopRatedCard';\nimport { ShowAll } from '../ShowAll'; // Wrapper\n\nimport { Section } from '../wrapper/Section';\nimport { ExploreSection } from '../wrapper/ExploreSection';\nconst GET_EXPERIENCES = gql`\n  query {\n    experiences {\n      id\n      title\n      cost\n      ratings\n      reviews\n      location\n      img\n    }\n  }\n`;\nexport const TopRated = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_EXPERIENCES);\n  const {\n    0: card,\n    1: setCard\n  } = useState(0);\n\n  const renderContent = (data, number) => {\n    var content = [];\n\n    for (let i = 0; i < number; i++) {\n      content.push(__jsx(\"div\", {\n        className: \"w-1/2 md:w-1/3 lg:w-1/4 2xl:w-1/6 pb-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, __jsx(TopRatedCard, {\n        key: i,\n        id: data === null || data === void 0 ? void 0 : data.experiences[i].id,\n        img: data === null || data === void 0 ? void 0 : data.experiences[i].img,\n        title: data === null || data === void 0 ? void 0 : data.experiences[i].title,\n        cost: data === null || data === void 0 ? void 0 : data.experiences[i].cost,\n        ratings: data === null || data === void 0 ? void 0 : data.experiences[i].ratings,\n        reviews: data === null || data === void 0 ? void 0 : data.experiences[i].reviews,\n        location: data === null || data === void 0 ? void 0 : data.experiences[i].location,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })));\n    }\n\n    return content;\n  };\n\n  if (error) return `Error! ${error.message}`;\n  return __jsx(React.Fragment, null, __jsx(ExploreSection, {\n    title: \"Top-rated places to stay\",\n    phrase: \"Explore some of the best-reviewed stays in the world\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(Section, {\n    title: \"Top-rated experiences\",\n    phrase: \"Book activities led by local hosts on your next trip.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"flex items-start justify-start flex-wrap w-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, loading ? __jsx(\"div\", {\n    className: \"flex justify-center items-center w-full py-20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(PulseLoader, {\n    size: 10,\n    color: '#008489',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })) : data && __jsx(React.Fragment, null, __jsx(Media, {\n    queries: {\n      xs: '(min-width: 0px) and (max-width: 739px)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, matches => matches.xs ? (setCard(1), renderContent(data, card)) : null), __jsx(Media, {\n    queries: {\n      small: '(min-width: 740px) and (max-width: 987px)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, matches => matches.small ? (setCard(1), renderContent(data, card)) : null), __jsx(Media, {\n    queries: {\n      large: '(min-width: 988px) and (max-width: 1299px)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, matches => matches.large ? (setCard(4), renderContent(data, card)) : null), __jsx(Media, {\n    queries: {\n      xl: '(min-width: 1300px) and (max-width: 1529px)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, matches => matches.xl ? (setCard(4), renderContent(data, card)) : null), __jsx(Media, {\n    queries: {\n      twoxl: '(min-width: 1530px)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, matches => matches.twoxl ? (setCard(6), renderContent(data, card)) : null))), __jsx(ShowAll, {\n    title: \"Show all experiences\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }))));\n};","map":{"version":3,"sources":["/Users/ken/Desktop/nextbnb/frontend/src/components/containers/TopRated.tsx"],"names":["React","useState","useQuery","gql","PulseLoader","Media","TopRatedCard","ShowAll","Section","ExploreSection","GET_EXPERIENCES","TopRated","loading","error","data","card","setCard","renderContent","number","content","i","push","experiences","id","img","title","cost","ratings","reviews","location","message","xs","matches","small","large","xl","twoxl"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport Media from 'react-media';\n\n// Components\nimport { TopRatedCard } from '../functions/TopRatedCard';\nimport { ShowAll } from '../ShowAll';\n\n// Wrapper\nimport { Section } from '../wrapper/Section';\nimport { ExploreSection } from '../wrapper/ExploreSection';\n\nconst GET_EXPERIENCES = gql`\n  query {\n    experiences {\n      id\n      title\n      cost\n      ratings\n      reviews\n      location\n      img\n    }\n  }\n`;\n\ninterface Experience {\n  id: string;\n  title: string;\n  cost: number;\n  ratings: number;\n  reviews: number;\n  location: string;\n  img: string;\n}\n\ninterface ExperienceData {\n  experiences: Experience[];\n}\n\nexport const TopRated: any = () => {\n  const { loading, error, data } = useQuery<ExperienceData>(GET_EXPERIENCES);\n  const [card, setCard] = useState<number>(0);\n\n  const renderContent = (data: ExperienceData, number: number) => {\n    var content: any[] = [];\n\n    for (let i = 0; i < number; i++) {\n      content.push(\n        <div className='w-1/2 md:w-1/3 lg:w-1/4 2xl:w-1/6 pb-5'>\n          <TopRatedCard\n            key={i}\n            id={data?.experiences[i].id}\n            img={data?.experiences[i].img}\n            title={data?.experiences[i].title}\n            cost={data?.experiences[i].cost}\n            ratings={data?.experiences[i].ratings}\n            reviews={data?.experiences[i].reviews}\n            location={data?.experiences[i].location}\n          />\n        </div>\n      );\n    }\n    return content;\n  };\n\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <ExploreSection\n        title='Top-rated places to stay'\n        phrase='Explore some of the best-reviewed stays in the world'>\n        <Section\n          title='Top-rated experiences'\n          phrase='Book activities led by local hosts on your next trip.'>\n          <div className='flex items-start justify-start flex-wrap w-full'>\n            {loading ? (\n              <div className='flex justify-center items-center w-full py-20'>\n                <PulseLoader size={10} color={'#008489'} />\n              </div>\n            ) : (\n              data && (\n                <>\n                  <Media\n                    queries={{ xs: '(min-width: 0px) and (max-width: 739px)' }}>\n                    {(matches) =>\n                      matches.xs\n                        ? (setCard(1), renderContent(data, card))\n                        : null\n                    }\n                  </Media>\n                  <Media\n                    queries={{\n                      small: '(min-width: 740px) and (max-width: 987px)'\n                    }}>\n                    {(matches) =>\n                      matches.small\n                        ? (setCard(1), renderContent(data, card))\n                        : null\n                    }\n                  </Media>\n                  <Media\n                    queries={{\n                      large: '(min-width: 988px) and (max-width: 1299px)'\n                    }}>\n                    {(matches) =>\n                      matches.large\n                        ? (setCard(4), renderContent(data, card))\n                        : null\n                    }\n                  </Media>\n                  <Media\n                    queries={{\n                      xl: '(min-width: 1300px) and (max-width: 1529px)'\n                    }}>\n                    {(matches) =>\n                      matches.xl\n                        ? (setCard(4), renderContent(data, card))\n                        : null\n                    }\n                  </Media>\n                  <Media\n                    queries={{\n                      twoxl: '(min-width: 1530px)'\n                    }}>\n                    {(matches) =>\n                      matches.twoxl\n                        ? (setCard(6), renderContent(data, card))\n                        : null\n                    }\n                  </Media>\n                </>\n              )\n            )}\n          </div>\n          <ShowAll title='Show all experiences' />\n        </Section>\n      </ExploreSection>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}