{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Desktop/nextbnb/frontend/src/components/containers/Hosts.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader'; // Components\n\nimport { HostCard } from '../presentational/HostCard';\nconst experiencedata = gql`\n  query {\n    experiences {\n      id\n      title\n      location\n      country\n      img\n      imglow\n    }\n  }\n`;\nexport const Hosts = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(experiencedata, {\n    pollInterval: 9000\n  });\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return __jsx(React.Fragment, null, loading ? __jsx(\"div\", {\n    className: \"flex justify-center items-center w-full py-20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(PulseLoader, {\n    size: 10,\n    color: '#008489',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })) : __jsx(\"div\", {\n    className: \"flex items-start justify-start flex-wrap w-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, data && data.experiences.map(({\n    id,\n    title,\n    location,\n    country,\n    img\n  }) => {\n    return __jsx(\"div\", {\n      className: \"md:w-1/4 sm:w-1/3 w-1/2 pb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(HostCard, {\n      key: id,\n      title: title,\n      img: img,\n      location: location,\n      country: country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  })));\n};","map":{"version":3,"sources":["/Users/ken/Desktop/nextbnb/frontend/src/components/containers/Hosts.tsx"],"names":["React","useQuery","gql","PulseLoader","HostCard","experiencedata","Hosts","loading","error","data","pollInterval","message","experiences","map","id","title","location","country","img"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB,C,CAEA;;AAEA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,MAAMC,cAAc,GAAGH,GAAI;;;;;;;;;;;CAA3B;AA0BA,OAAO,MAAMI,KAAiC,GAAG,MAAM;AACrD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BR,QAAQ,CAAiBI,cAAjB,EAAiC;AACxEK,IAAAA,YAAY,EAAE;AAD0D,GAAjC,CAAzC;AAIA,MAAIH,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACG,OAAQ,EAA/B;AACX,SACE,4BACGJ,OAAO,GACN;AAAK,IAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,IAAI,EAAE,EAAnB;AAAuB,IAAA,KAAK,EAAE,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADM,GAKN;AAAK,IAAA,SAAS,EAAC,iDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,IAAI,IACHA,IAAI,CAACG,WAAL,CAAiBC,GAAjB,CAAqB,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,OAAvB;AAAgCC,IAAAA;AAAhC,GAAD,KAA2C;AAC9D,WACE;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AACE,MAAA,GAAG,EAAEJ,EADP;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,GAAG,EAAEG,GAHP;AAIE,MAAA,QAAQ,EAAEF,QAJZ;AAKE,MAAA,OAAO,EAAEC,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAWD,GAZD,CAFJ,CANJ,CADF;AA0BD,CAjCM","sourcesContent":["import * as React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\n\n// Components\nimport { TopRatedCard } from '../presentational/TopRatedCard';\nimport { HostCard } from '../presentational/HostCard';\n\nconst experiencedata = gql`\n  query {\n    experiences {\n      id\n      title\n      location\n      country\n      img\n      imglow\n    }\n  }\n`;\n\ninterface Experience {\n  id: string;\n  title: string;\n  location: string;\n  country: string;\n  img: string;\n  imglow: string;\n}\n\ninterface ExperienceData {\n  experiences: Experience[];\n}\n\nexport const Hosts: () => string | JSX.Element = () => {\n  const { loading, error, data } = useQuery<ExperienceData>(experiencedata, {\n    pollInterval: 9000\n  });\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return (\n    <>\n      {loading ? (\n        <div className='flex justify-center items-center w-full py-20'>\n          <PulseLoader size={10} color={'#008489'} />\n        </div>\n      ) : (\n        <div className='flex items-start justify-start flex-wrap w-full'>\n          {data &&\n            data.experiences.map(({ id, title, location, country, img }) => {\n              return (\n                <div className='md:w-1/4 sm:w-1/3 w-1/2 pb-5'>\n                  <HostCard\n                    key={id}\n                    title={title}\n                    img={img}\n                    location={location}\n                    country={country}\n                  />\n                </div>\n              );\n            })}\n        </div>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}