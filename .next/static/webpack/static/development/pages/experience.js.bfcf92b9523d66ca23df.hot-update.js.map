{"version":3,"file":"static/webpack/static/development/pages/experience.js.bfcf92b9523d66ca23df.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./src/components/containers/Hosts.tsx"],"sourcesContent":["export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","import * as React from 'react';\nimport Data from '../../data/experiences.json';\nimport PulseLoader from 'react-spinners/PulseLoader';\n\n// Components\nimport { HostCard } from '../functions/HostCard';\n\n// Wrapper\nimport { ExploreSection } from '../wrapper/ExploreSection';\nimport cuid from 'cuid';\n\ninterface Experience {\n  id: string;\n  title: string;\n  location: string;\n  country: string;\n  img: string;\n  imglow: string;\n}\n\ninterface ExperienceData {\n  experiences: Experience[];\n}\n\nexport const Hosts: any = () => {\n  const [loading, setLoading] = useState(true);\n  setInterval(() => setLoading(false), 1000);\n\n  return (\n    <>\n      <ExploreSection title='Meet hosts around the world'>\n        {loading ? (\n          <div className='flex justify-center items-center w-full py-20'>\n            <PulseLoader size={10} color={'#008489'} />\n          </div>\n        ) : (\n          <div className='flex items-start justify-start flex-wrap w-full'>\n            {data &&\n              data.experiences.map(({ id, title, location, country, img }) => {\n                return (\n                  <React.Fragment key={cuid()}>\n                    <div className='md:w-1/4 sm:w-1/3 w-1/2 pb-5'>\n                      <HostCard\n                        key={id}\n                        title={title}\n                        img={img}\n                        location={location}\n                        country={country}\n                      />\n                    </div>\n                  </React.Fragment>\n                );\n              })}\n          </div>\n        )}\n      </ExploreSection>\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAMA;;;;A","sourceRoot":""}