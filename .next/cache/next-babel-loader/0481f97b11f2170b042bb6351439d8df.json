{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ken/Desktop/nextbnb/frontend/src/components/containers/Today.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query LocationExperiences($available: String, $location: String) {\\n    experiences(\\n      where: { available: $available, location: $location }\\n      first: 6\\n    ) {\\n      id\\n      title\\n      cost\\n      ratings\\n      reviews\\n      location\\n      img\\n      available\\n      category\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react'; // import { useState } from 'react';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport withSizes from 'react-sizes'; // Components\n// import { LocationExperienceCard } from '../functions/LocationExperienceCard';\n\nimport { ShowAll } from '../ShowAll'; // Wrapper\n\nimport { Section } from '../wrapper/Section';\nvar GET_LOCATION_EXPERIENCES = gql(_templateObject());\n\nvar mapSizesToProps = function mapSizesToProps(_ref) {\n  var width = _ref.width;\n  return {\n    isMobile: width < 480,\n    isTablet: width > 480 && width < 1024,\n    isLaptop: width > 1024 && width < 1440,\n    isDesktop: width > 1440\n  };\n}; // interface Experience {\n//   id: string;\n//   title: string;\n//   cost: number;\n//   ratings: number;\n//   reviews: number;\n//   category: string;\n//   img: string;\n// }\n// interface ExperienceData {\n//   experiences: Experience[];\n// }\n\n\nvar Today = function Today(_ref2) {\n  var isMobile = _ref2.isMobile,\n      isTablet = _ref2.isTablet,\n      isLaptop = _ref2.isLaptop,\n      isDesktop = _ref2.isDesktop;\n\n  var _useQuery = useQuery(GET_LOCATION_EXPERIENCES, {\n    variables: {\n      available: 'Today',\n      location: 'Vancouver'\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return \"Error! \".concat(error.message);\n  return __jsx(React.Fragment, null, __jsx(Section, {\n    title: \"Today in Vancouver\",\n    phrase: \"Book activities led by local hosts on your next trip.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"flex items-start justify-start flex-wrap w-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, loading ? __jsx(\"div\", {\n    className: \"flex justify-center items-center w-full py-20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(PulseLoader, {\n    size: 10,\n    color: '#008489',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })) : data && __jsx(React.Fragment, null, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, isMobile ? 'Is Mobile' : 'Is Not Mobile'), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, isTablet ? 'Is Tablet' : 'Is not Tablet'), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, isLaptop ? 'Is Laptop' : 'Is not Laptop'), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, isDesktop ? 'Is Desktop' : 'Is not Desktop'))), __jsx(ShowAll, {\n    title: \"Show all experiences\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })));\n};\n\nexport default withSizes(mapSizesToProps)(Today);","map":{"version":3,"sources":["/Users/ken/Desktop/nextbnb/frontend/src/components/containers/Today.jsx"],"names":["React","useQuery","gql","PulseLoader","withSizes","ShowAll","Section","GET_LOCATION_EXPERIENCES","mapSizesToProps","width","isMobile","isTablet","isLaptop","isDesktop","Today","variables","available","location","loading","error","data","message"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AACA,SAASC,OAAT,QAAwB,YAAxB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,IAAMC,wBAAwB,GAAGL,GAAH,mBAA9B;;AAmBA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAgB;AACtCC,IAAAA,QAAQ,EAAED,KAAK,GAAG,GADoB;AAEtCE,IAAAA,QAAQ,EAAEF,KAAK,GAAG,GAAR,IAAeA,KAAK,GAAG,IAFK;AAGtCG,IAAAA,QAAQ,EAAEH,KAAK,GAAG,IAAR,IAAgBA,KAAK,GAAG,IAHI;AAItCI,IAAAA,SAAS,EAAEJ,KAAK,GAAG;AAJmB,GAAhB;AAAA,CAAxB,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,IAAMK,KAAK,GAAG,SAARA,KAAQ,QAAiD;AAAA,MAA9CJ,QAA8C,SAA9CA,QAA8C;AAAA,MAApCC,QAAoC,SAApCA,QAAoC;AAAA,MAA1BC,QAA0B,SAA1BA,QAA0B;AAAA,MAAhBC,SAAgB,SAAhBA,SAAgB;;AAAA,kBAC5BZ,QAAQ,CAACM,wBAAD,EAA2B;AAClEQ,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAE,OADF;AAETC,MAAAA,QAAQ,EAAE;AAFD;AADuD,GAA3B,CADoB;AAAA,MACrDC,OADqD,aACrDA,OADqD;AAAA,MAC5CC,KAD4C,aAC5CA,KAD4C;AAAA,MACrCC,IADqC,aACrCA,IADqC;;AAQ7D,MAAID,KAAJ,EAAW,wBAAiBA,KAAK,CAACE,OAAvB;AAEX,SACE,4BACE,MAAC,OAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,MAAM,EAAC,uDAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE;AAAK,IAAA,SAAS,EAAC,iDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OAAO,GACN;AAAK,IAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,IAAI,EAAE,EAAnB;AAAuB,IAAA,KAAK,EAAE,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADM,GAKNE,IAAI,IACF,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMV,QAAQ,GAAG,WAAH,GAAiB,eAA/B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,QAAQ,GAAG,WAAH,GAAiB,eAA/B,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,QAAQ,GAAG,WAAH,GAAiB,eAA/B,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,SAAS,GAAG,YAAH,GAAkB,gBAAjC,CAJF,CAPN,CAHF,EAqCE,MAAC,OAAD;AAAS,IAAA,KAAK,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,CADF,CADF;AA2CD,CArDD;;AAuDA,eAAeT,SAAS,CAACI,eAAD,CAAT,CAA2BM,KAA3B,CAAf","sourcesContent":["import * as React from 'react';\n// import { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport withSizes from 'react-sizes';\n\n// Components\n// import { LocationExperienceCard } from '../functions/LocationExperienceCard';\nimport { ShowAll } from '../ShowAll';\n\n// Wrapper\nimport { Section } from '../wrapper/Section';\n\nconst GET_LOCATION_EXPERIENCES = gql`\n  query LocationExperiences($available: String, $location: String) {\n    experiences(\n      where: { available: $available, location: $location }\n      first: 6\n    ) {\n      id\n      title\n      cost\n      ratings\n      reviews\n      location\n      img\n      available\n      category\n    }\n  }\n`;\n\nconst mapSizesToProps = ({ width }) => ({\n  isMobile: width < 480,\n  isTablet: width > 480 && width < 1024,\n  isLaptop: width > 1024 && width < 1440,\n  isDesktop: width > 1440\n});\n\n// interface Experience {\n//   id: string;\n//   title: string;\n//   cost: number;\n//   ratings: number;\n//   reviews: number;\n//   category: string;\n//   img: string;\n// }\n\n// interface ExperienceData {\n//   experiences: Experience[];\n// }\n\nconst Today = ({ isMobile, isTablet, isLaptop, isDesktop }) => {\n  const { loading, error, data } = useQuery(GET_LOCATION_EXPERIENCES, {\n    variables: {\n      available: 'Today',\n      location: 'Vancouver'\n    }\n  });\n\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <Section\n        title='Today in Vancouver'\n        phrase='Book activities led by local hosts on your next trip.'>\n        <div className='flex items-start justify-start flex-wrap w-full'>\n          {loading ? (\n            <div className='flex justify-center items-center w-full py-20'>\n              <PulseLoader size={10} color={'#008489'} />\n            </div>\n          ) : (\n            data && (\n              <>\n                <div>{isMobile ? 'Is Mobile' : 'Is Not Mobile'}</div>\n                <div>{isTablet ? 'Is Tablet' : 'Is not Tablet'}</div>\n                <div>{isLaptop ? 'Is Laptop' : 'Is not Laptop'}</div>\n                <div>{isDesktop ? 'Is Desktop' : 'Is not Desktop'}</div>\n                {/* {data.experiences.map((experience, index) => {\n                  if (index == 4) {\n                  }\n                  return (\n                    <div className='w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 pb-5'>\n                      <LocationExperienceCard\n                        key={index}\n                        id={experience.id}\n                        img={experience.img}\n                        title={experience.title}\n                        cost={experience.cost}\n                        ratings={experience.ratings}\n                        reviews={experience.reviews}\n                        category={experience.category}\n                      />\n                    </div>\n                  );\n                })} */}\n              </>\n            )\n          )}\n        </div>\n        <ShowAll title='Show all experiences' />\n      </Section>\n    </>\n  );\n};\n\nexport default withSizes(mapSizesToProps)(Today);\n"]},"metadata":{},"sourceType":"module"}